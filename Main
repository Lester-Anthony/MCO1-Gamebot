import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

public class Main extends JFrame {
    private int[][] maze;
    private final List<Integer> path = new ArrayList<>();
    private int pathIndex;

    public Main(int mazeSize) {
        setTitle("Simple Maze Solver");
        setSize(640, 480);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        initializeMaze(mazeSize);

        DepthFirst.searchPath(maze, 1, 1, path);
        pathIndex = path.size() - 2;

        // game loop each 0.5 seconds
//        new Timer().schedule(new TimerTask() {
//            @Override
//            public void run() {
//                update();
//                repaint();
//            }
//        }, 100, 500);
    }

    private void initializeMaze(int size) {
        maze = new int[size+2][size+2];

        //Outer boarder
        for (int i = 0; i < size+2; i++) {
            maze[i][0] = 1;          // Left border
            maze[i][size+1] = 1;   // Right border
        }

        for (int j = 0; j < size+2; j++) {
            maze[0][j] = 1;          // Top border
            maze[size+1][j] = 1;   // Bottom border
        }


        // Create paths using a simple algorithm
        // You can replace this with a more sophisticated maze generation algorithm
        for (int i = 1; i < size - 1; i += 2) {
            for (int j = 1; j < size - 1; j += 2) {
                maze[i][j] = 0;
            }
        }

        // Set the start and end points
        maze[1][1] = 0; // Start
        maze[size][size] = 9; // End
    }

    private void update() {
        pathIndex -= 2;
        if (pathIndex < 0) {
            pathIndex = 0;
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        g.translate(50, 50);

        // draw the maze
        for (int row = 0; row < maze.length; row++) {
            for (int col = 0; col < maze[0].length; col++) {
                Color color;
                switch (maze[row][col]) {
                    case 1:
                        color = Color.BLACK;
                        break;
                    case 9:
                        color = Color.RED;
                        break;
                    default:
                        color = Color.WHITE;
                }
                g.setColor(color);
                g.fillRect(30 * col, 30 * row, 30, 30);
                g.setColor(Color.BLACK);
                g.drawRect(30 * col, 30 * row, 30, 30);
            }
        }

        // draw the path list
        for (int p = 0; p < path.size(); p += 2) {
            int pathX = path.get(p);
            int pathY = path.get(p + 1);
            g.setColor(Color.GREEN);
            g.fillRect(pathX * 30, pathY * 30, 30, 30);
        }

        // draw the ball on path
        int pathX = path.get(pathIndex);
        int pathY = path.get(pathIndex + 1);
        g.setColor(Color.RED);
        g.fillOval(pathX * 30, pathY * 30, 30, 30);
    }

    @Override
    protected void processKeyEvent(KeyEvent ke) {
        if (ke.getID() != KeyEvent.KEY_PRESSED) {
            return;
        }
        if (ke.getKeyCode() == KeyEvent.VK_RIGHT) {
            pathIndex -= 2;
            if (pathIndex < 0) {
                pathIndex = 0;
            }
        } else if (ke.getKeyCode() == KeyEvent.VK_LEFT) {
            pathIndex += 2;
            if (pathIndex > path.size() - 2) {
                pathIndex = path.size() - 2;
            }
        }
        repaint();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            int mazeSize = getUserInput();
            Main view = new Main(mazeSize);
            view.setVisible(true);
        });
    }

    private static int getUserInput() {
        Scanner scanner = new Scanner(System.in);
        int size;
        do {
            System.out.print("Enter the size of the maze (between 8 and 64): ");
            size = scanner.nextInt();
        } while (size < 8 || size > 64);
        return size;
    }
}
